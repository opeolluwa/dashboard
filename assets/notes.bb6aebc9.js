import{A as a,C as i,b as r}from"./index.679e4c1f.js";const c=a(),o=c.getAuthToken;console.log({AUTH_TOKEN:o});const g=i("todoStore",{state:()=>({noteEntries:[],noOfRows:10,pageIndex:1,isLoading:!1,isFetchingEntries:!1,errorFetchingNotes:!1,errorMessage:""}),getters:{getAllTodo:e=>e.noteEntries,getNoteById:e=>t=>{var s;return(s=e.noteEntries)==null?void 0:s.filter(n=>n.id===String(t))[0]}},actions:{async fetchAllNotes(){this.isLoading=!0;try{const{data:e}=await r.get("/notes?page=1&noOfRows=10",{headers:{Authorization:`Bearer ${o}`}});this.noteEntries=e.data.notes,this.noOfRows=e.data.noOfRows,this.pageIndex=e.DataTransfer.CurrentPage,this.isLoading=!1,console.log(JSON.stringify(e))}catch{this.isLoading=!1}},async createNewEntry(e){a(),this.isLoading=!0;try{const{data:t}=await r.post("/notes",{...e},{headers:{Authorization:`Bearer ${o}`}});return t.success?(this.fetchAllNotes(),this.isLoading=!1,e.title="",e.content="",!0):!1}catch{return this.errorFetchingNotes=!0,this.isLoading=!1,!1}},async deleteNote(e){try{const{data:t}=await r.delete(`/notes/${e}`,{headers:{Authorization:`Bearer ${o}`}});console.log("the note id is ",e),console.log(JSON.stringify(t))}catch{}},async editNote(e,t){try{const{data:s}=await r.put(`/notes/${e}`,{...t},{headers:{Authorization:`Bearer ${o}`}});return s.data.success}catch{return!1}}}});export{g as u};
